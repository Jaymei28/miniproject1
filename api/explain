from ..serializers import EmployeeSerializer  # Import the EmployeeSerializer to convert data to/from JSON
from rest_framework.response import Response  # Import the Response object to send HTTP responses
from rest_framework import status  # Import HTTP status codes for easy reference
from rest_framework.views import APIView  # Import APIView to create class-based views
from employees.models import Employee  # Import the Employee model from the employees app
from django.http import Http404  # Import Http404 exception to raise when an object isn't found


# Define a class for handling requests related to Employee objects (List or Create)
class Employees(APIView):
    
    # GET method for fetching a list of all employees
    def get(self, request):
        employees = Employee.objects.all()  # Retrieve all Employee objects from the database
        serializer = EmployeeSerializer(employees, many=True)  # Serialize the employee data to JSON
        return Response(serializer.data, status=status.HTTP_200_OK)  # Return the serialized data with 200 OK status
    
    # POST method for creating a new employee
    def post(self, request):
        serializer = EmployeeSerializer(data=request.data)  # Deserialize the incoming data to create an Employee
        if serializer.is_valid():  # Check if the data is valid based on the serializer's validation rules
            serializer.save()  # Save the new employee object to the database
            return Response(serializer.data, status=status.HTTP_201_CREATED)  # Return the created employee data with 201 Created status
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)  # If the data is invalid, return errors with 400 Bad Request status


# Define a class for handling requests related to individual Employee objects (Retrieve, Update, Delete)
class EmployeeDetail(APIView):
    
    # Helper method to get a specific employee by its primary key (pk)
    def get_object(self, pk):
        try:
            return Employee.objects.get(pk=pk)  # Try to fetch the employee with the given pk
        except Employee.DoesNotExist:  # If the employee does not exist, raise a 404 error
            raise Http404
    
    # GET method for fetching a specific employee by its primary key (pk)
    def get(self, request, pk):
        employee = self.get_object(pk=pk)  # Fetch the employee by its pk using the get_object method
        serializer = EmployeeSerializer(employee)  # Serialize the employee data to JSON
        return Response(serializer.data, status=status.HTTP_200_OK)  # Return the serialized employee data with 200 OK status
    
    # PUT method for updating an existing employee
    def put(self, request, pk):
        employee = self.get_object(pk)  # Fetch the employee to update using the get_object method
        serializer = EmployeeSerializer(employee, data=request.data)  # Deserialize the incoming data and update the employee
        if serializer.is_valid():  # Check if the data is valid for updating
            serializer.save()  # Save the updated employee object to the database
            return Response(serializer.data, status=status.HTTP_200_OK)  # Return the updated data with 200 OK status
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)  # If data is invalid, return the errors with 400 Bad Request status
    
    # DELETE method for deleting an existing employee
    def delete(self, request, pk):
        employee = self.get_object(pk=pk)  # Fetch the employee to delete using the get_object method
        employee.delete()  # Delete the employee from the database
        return Response(status=status.HTTP_204_NO_CONTENT)  # Return 204 No Content status as there's no content to return after deletion
